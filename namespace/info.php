<?php

/*
  В PHP пространства имен используются для решения двух проблем,
 * с которыми сталкиваются авторы библиотек и приложений
 * при создании повторно используемых элементов кода, таких как классы и функции:

  --Конфликт имен между вашим кодом и внутренними классами/функциями/константами PHP или сторонними.

  --Возможность создавать псевдонимы (или сокращения) для Ну_Очень_Длинных_Имен,
  чтобы облегчить первую проблему и улучшить читаемость исходного кода.

 * Пространства имен PHP предоставляют возможность группировать логически связанные классы, интерфейсы, функции и константы.

  Хотя любой корректный PHP-код может находиться внутри пространства имен,
 * только классы (включая абстрактные и трейты), интерфейсы, функции и константы зависят от него.

  Пространства имен объявляются с помощью зарезервированного слова namespace.
 * Файл, содержащий пространство имен,
 * должен содержать его объявление в начале перед любым другим кодом,
 * кроме зарезервированного слова declare.
 *
 * Кроме того, объявлению пространства имен не должен предшествовать не-PHP код,
 * в том числе лишние пробелы!
 */

/*
  PHP поддерживают 3 вида создания псевдонима имени или импорта:
 * 1 создание псевдонима для имени класса,
 * 2 создание псевдонима для имени интерфейса и
 * 3 для имени пространства имен.
 * PHP 5.6+ также поддерживает
 * 1 импорт функций и
 * 2 имен констант.

  В PHP создание псевдонима имени выполняется с помощью оператора use.
 */

//Правила импорта задаются на каждый файл отдельно.
//Это означает, что присоединяемые файлы НЕ будут наследовать правила импорта из родительского файла!

use Car\Drive\Motor as Motor;

$motor = new Car\Drive\Motor;
$motor = new Motor;

// импортирование глобального класса
use ArrayObject;
// импортирование функции (PHP 5.6+)
use function Car\Drive\Motor\engineStartFunc;

engineStartFunc($key);

// псевдоним функции (PHP 5.6+)
use function Car\Drive\Motor\engineStartFunc as startFunc;

startFunc($key);

// импортирование константы (PHP 5.6+)
use const Car\Drive\COUNT_CYLINDERS;

echo COUNT_CYLINDERS;

//Импорт выполняется во время компиляции, и не влияет на имена динамических классов, функций или констант.
use Car\Drive\Motor as Motor;

$obj = new Motor; // создает объект класса Car\Drive\Motor
$a = 'Motor';
$obj = new $a;      // создает объект класса Motor
//Импортирование и абсолютные имена

use My\Full\Classname as Another,
    My\Full\NSname;

$obj = new Another; // создает объект класса My\Full\Classname
$obj = new \Another; // создает объект класса Another
$obj = new Another\thing; // создает объект класса My\Full\Classname\thing
$obj = new \Another\thing; // создает объект класса Another\thing




/*
  Без определения пространства имен, определения всех классов и функций находятся в глобальном пространстве
 * - также как это было в PHP до введения пространств имен.
 * Добавление префикса \ к именам означает, что это имя должно находиться в глобальном пространстве,
 * даже если вы находитесь в контексте определенного пространства имен.
 */

namespace A\B\C;

// Эта функция является A\B\C\fopen
function fopen() {
    $f = \fopen(); // вызов глобальной функции fopen
    return $f;
}
